Basic Ques: 
এখানে ৫০টি প্র্যাকটিস প্রশ্ন দেয়া হলো, যা জাভার সবগুলো OOP কনসেপ্ট—ইনক্যাপসুলেশন, ইনহেরিটেন্স, পলিমরফিজম, অ্যাবস্ট্রাকশন, এবং অন্যান্য অ্যাডভান্সড টপিক কভার করবে:

### ১-১০: Object Class & Basic OOP Concepts
1. `Object` ক্লাসের `equals()` এবং `hashCode()` মেথড কিভাবে কাজ করে এবং এদের গুরুত্ব কী?
2. `Object` ক্লাসের `toString()` মেথড কিভাবে কাস্টমাইজ করবেন?
3. একটি ক্লাস তৈরি করুন যা `Object` ক্লাসের `equals()` এবং `hashCode()` মেথড ওভাররাইড করবে।
4. `clone()` মেথডের মাধ্যমে একটি অবজেক্ট কপি করার উদাহরণ দিন।
5. `getClass()` মেথড ব্যবহার করে কোনো অবজেক্টের ক্লাস চেক করার উদাহরণ দিন।
6. একটি ক্লাস তৈরি করুন যা `finalize()` মেথড ব্যবহার করে রিসোর্স মুক্ত করবে।
7. কিভাবে `instanceof` কিওয়ার্ড ব্যবহার করে একটি অবজেক্টের টাইপ চেক করবেন?
8. `Object` ক্লাসের `notify()` এবং `notifyAll()` মেথড ব্যবহার করে থ্রেড সিঙ্ক্রোনাইজেশন উদাহরণ দিন।
9. `toString()` মেথডের মাধ্যমে কিভাবে অবজেক্টের কাস্টম স্ট্রিং রিটার্ন করবেন?
10. একটি ক্লাস তৈরি করুন এবং `hashCode()` মেথড কিভাবে কাজ করে তা প্রমাণ করুন।

### ১১-২০: Encapsulation
11. ইনক্যাপসুলেশন কী এবং এটি কেন প্রয়োজন?
12. একটি ক্লাস তৈরি করুন যেটি প্রাইভেট ফিল্ড এবং পাবলিক গেটার এবং সেটার মেথড ব্যবহার করবে।
13. একটি ক্লাস তৈরি করুন যাতে আপনি সঠিকভাবে ডেটা ভ্যালিডেশন করবেন গেটার এবং সেটার মাধ্যমে।
14. `setBalance()` মেথড দিয়ে কোনো একাউন্টের ব্যালেন্স সেট করুন এবং ভ্যালিডেশন যুক্ত করুন।
15. গেটার এবং সেটার মেথডের মধ্যে পার্থক্য কী?
16. ইনক্যাপসুলেশন ব্যবহারের মাধ্যমে কোনো অবজেক্টের অবস্থা নিরাপদ রাখার উদাহরণ দিন।
17. ইনক্যাপসুলেশন ব্যবহার করে একটি `BankAccount` ক্লাস তৈরি করুন, যেখানে ব্যালেন্স ডিপোজিট এবং উইথড্র ফাংশন থাকবে।
18. ডেটার ভ্যালিডেশন কেন গেটার এবং সেটার মাধ্যমে করা হয়?
19. প্রাইভেট ভেরিয়েবল থেকে ডেটা এক্সেস কিভাবে নিয়ন্ত্রণ করা যায়?
20. একটি ক্লাস তৈরি করুন যা ইনক্যাপসুলেশন ব্যবহার করে কোনো `Employee` এর স্যালারি ম্যানেজ করবে।

### ২১-৩০: Inheritance
21. ইনহেরিটেন্স কী এবং এটি কিভাবে কাজ করে?
22. একটি সুপার ক্লাস এবং সাব ক্লাস তৈরি করুন, এবং তাদের মধ্যে সম্পর্ক দেখান।
23. সুপার ক্লাসের মেথডকে সাব ক্লাসে ওভাররাইড করার উদাহরণ দিন।
24. `super` কিওয়ার্ড ব্যবহার করে সুপার ক্লাসের কন্সট্রাকটর কল করার উদাহরণ দিন।
25. একটি ক্লাস তৈরি করুন, যেখানে ইনহেরিটেন্স ব্যবহার করে একাধিক সাব ক্লাস তৈরি করা হবে।
26. একাধিক ইনহেরিটেন্স কেন জাভাতে সমর্থিত নয় এবং এর বিকল্প কী?
27. একটি ক্লাস তৈরি করুন যা `super` কিওয়ার্ড ব্যবহার করে সুপার ক্লাসের মেথড কল করবে।
28. একটি সাব ক্লাস থেকে সুপার ক্লাসের মেথড পরিবর্তন না করে কিভাবে ব্যবহার করবেন?
29. সুপার ক্লাসের ডেটা মেম্বার বা মেথডে অ্যাক্সেস কিভাবে করবেন?
30. একটি সুপার ক্লাস এবং সাব ক্লাস তৈরি করুন, যেখানে সাব ক্লাসটি সুপার ক্লাসের মেথডটি ওভাররাইড করবে।

### ৩১-৪০: Polymorphism
31. পলিমরফিজম কী এবং এটি কিভাবে কাজ করে?
32. মেথড ওভারলোডিং এবং মেথড ওভাররাইডিং এর মধ্যে পার্থক্য কী?
33. একটি ক্লাস তৈরি করুন, যেখানে মেথড ওভারলোডিং প্রয়োগ করা হয়েছে।
34. একটি ক্লাস তৈরি করুন যেখানে মেথড ওভাররাইডিং ব্যবহার করা হয়েছে।
35. পলিমরফিজমের মাধ্যমে একটি ক্লাসের মেথড গুলি কিভাবে একাধিক ভিন্ন আচরণ প্রদর্শন করতে পারে?
36. একাধিক ক্লাসের মধ্যে পলিমরফিজম কিভাবে কাজ করে, একটি উদাহরণ দিয়ে দেখান।
37. `super` কিওয়ার্ড কিভাবে পলিমরফিজমের সাথে কাজ করে?
38. একটি উদাহরণ দিয়ে দেখান, যেখানে একটি প্যারেন্ট ক্লাসের মেথড পলিমরফিকভাবে পরিবর্তিত হয়।
39. পলিমরফিজমের মাধ্যমে একাধিক অবজেক্টের আচরণ একত্রিত করা কিভাবে সম্ভব?
40. একটি ইন্টারফেস ব্যবহার করে পলিমরফিজম প্রমাণ করুন।

### ৪১-৫০: Abstraction
41. অ্যাবস্ট্রাকশন কী এবং এটি কিভাবে কাজ করে?
42. একটি অ্যাবস্ট্রাক্ট ক্লাস তৈরি করুন যা একটি সাধারণ গাড়ি মডেল এবং এর স্পেসিফিক অ্যাবস্ট্রাকশন দেখাবে।
43. অ্যাবস্ট্রাক্ট মেথডের কাজ কী এবং এটি কিভাবে বাস্তবায়ন করা হয়?
44. একটি ক্লাস তৈরি করুন যেটি একটি অ্যাবস্ট্রাক্ট ক্লাস থেকে ইনহেরিট করে এবং মেথড ওভাররাইড করে।
45. ইন্টারফেস এবং অ্যাবস্ট্রাক্ট ক্লাসের মধ্যে পার্থক্য কী?
46. একটি অ্যাবস্ট্রাক্ট ক্লাসের ভিতরে কিভাবে কন্সট্রাকটর ব্যবহার করবেন?
47. একটি `Shape` নামক অ্যাবস্ট্রাক্ট ক্লাস তৈরি করুন, যেটি বিভিন্ন ধরনের শেপ (যেমন, Circle, Square) এর জন্য এক্সটেনশন হবে।
48. `interface` এবং `abstract class` এর ব্যবহার কিভাবে ভিন্ন?
49. একটি ইন্টারফেস তৈরি করুন এবং তার মধ্যে মেথড ডিফাইন করুন, তারপর ক্লাসে তা ইমপ্লিমেন্ট করুন।
50. অ্যাবস্ট্রাকশন এবং ইনহেরিটেন্সের মধ্যকার সম্পর্ক কী?



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Practice Problem: 

এখানে জাভার OOP (Object-Oriented Programming) এর সমস্ত মূল বিষয় নিয়ে ৫০টি প্র্যাকটিস প্রবলেম সিরিয়ালভাবে বাংলায় দেওয়া হলো:

### 1. **ক্লাস এবং অবজেক্ট:**
1. একটি `Car` ক্লাস তৈরি করুন যার মধ্যে `model`, `color`, এবং `speed` ফিল্ড থাকবে। এই ক্লাসের একটি অবজেক্ট তৈরি করুন এবং এর মান দেখান।
2. একটি `Student` ক্লাস তৈরি করুন যার মধ্যে `name`, `rollNumber`, এবং `grade` থাকবে। একটি অবজেক্ট তৈরি করে তথ্য প্রদর্শন করুন।
3. একটি `Book` ক্লাস তৈরি করুন, যার মধ্যে `title` এবং `author` ফিল্ড থাকবে। কনস্ট্রাক্টর ব্যবহার করে অবজেক্ট তৈরি করুন এবং এটি প্রদর্শন করুন।
4. একটি `Person` ক্লাস তৈরি করুন যার মধ্যে `name`, `age` ফিল্ড থাকবে এবং কনস্ট্রাক্টর ব্যবহার করে এসব ফিল্ড ইনিশিয়ালাইজ করুন। তারপর এই ক্লাসের অবজেক্ট তৈরি করে তথ্য প্রদর্শন করুন।
5. একটি `Person` ক্লাসের অবজেক্ট তৈরি করুন এবং সেটারের মাধ্যমে এর মান পরিবর্তন করুন।

### 2. **কনস্ট্রাক্টর:**
6. একটি `Book` ক্লাস তৈরি করুন যার মধ্যে `title`, `author`, এবং `price` থাকবে। কনস্ট্রাক্টর ব্যবহার করে এগুলো ইনিশিয়ালাইজ করুন এবং তথ্য প্রদর্শন করুন।
7. একটি `Rectangle` ক্লাস তৈরি করুন যা `length` এবং `width` ইনপুট নেবে এবং এর `area` বের করবে।


### 3. **এনক্যাপসুলেশন:**
21. একটি `BankAccount` ক্লাস তৈরি করুন যার মধ্যে `balance` এবং `accountNumber` প্রাইভেট ফিল্ড থাকবে। গেটার এবং সেটারের মাধ্যমে এগুলো অ্যাক্সেস করুন।
22. একটি `Person` ক্লাস তৈরি করুন যার মধ্যে `name` এবং `age` প্রাইভেট ফিল্ড থাকবে। গেটার এবং সেটারের মাধ্যমে এই ফিল্ডগুলো অ্যাক্সেস করুন।
23. একটি `Employee` ক্লাস তৈরি করুন যার মধ্যে `name`, `age`, এবং `salary` প্রাইভেট ফিল্ড থাকবে। গেটার এবং সেটারের মাধ্যমে এই ফিল্ডগুলো অ্যাক্সেস করুন।
24. একটি `Product` ক্লাস তৈরি করুন যার মধ্যে `id`, `name`, এবং `price` প্রাইভেট ফিল্ড থাকবে। গেটার এবং সেটারের মাধ্যমে এগুলো অ্যাক্সেস করুন।
25. একটি `Car` ক্লাস তৈরি করুন যার মধ্যে `make`, `model`, এবং `price` প্রাইভেট ফিল্ড থাকবে। গেটার এবং সেটারের মাধ্যমে এগুলো অ্যাক্সেস করুন।

### 4. **ইনহেরিটেন্স:**
8. একটি `Animal` ক্লাস তৈরি করুন যেখানে `sound()` মেথড থাকবে। এরপর একটি `Dog` ক্লাস তৈরি করুন যা `Animal` ক্লাস থেকে ইনহেরিট করবে এবং `sound()` মেথড ওভাররাইড করবে।
9. একটি `Shape` ক্লাস তৈরি করুন যেখানে `draw()` মেথড থাকবে। তারপর `Circle` এবং `Square` ক্লাস তৈরি করুন এবং তাদের নিজস্ব `draw()` মেথডে কার্যকরী বাস্তবায়ন দিন।
10. একটি `Vehicle` ক্লাস তৈরি করুন যেখানে `start()` মেথড থাকবে। তারপর এটি `Car` এবং `Truck` ক্লাসে ইনহেরিট করে এবং `start()` মেথড ভিন্নভাবে ওভাররাইড করুন।
11. একটি `Person` ক্লাস তৈরি করুন এবং একটি `Employee` ক্লাস তৈরি করুন যা `Person` থেকে ইনহেরিট করবে এবং তার মধ্যে একটি `salary` ফিল্ড থাকবে।
12. একটি `Shape` ক্লাস তৈরি করুন যার মধ্যে `area()` মেথড থাকবে। তারপর এটি `Rectangle` এবং `Circle` ক্লাসে ইনহেরিট করে তাদের নিজস্ব `area()` মেথড বাস্তবায়ন করুন।

### 5. **পলিমরফিজম:**
13. একটি `Shape` ক্লাস তৈরি করুন যেখানে `draw()` মেথড থাকবে। পলিমরফিজম ব্যবহার করে `Circle` এবং `Square` ক্লাসের `draw()` মেথড কল করুন।
14. একটি `Payment` ক্লাস তৈরি করুন যেখানে `calculatePayment()` মেথড থাকবে। এটি `FullTimeEmployee` এবং `PartTimeEmployee` ক্লাসে ওভাররাইড করুন।
15. একটি `LibraryItem` ক্লাস তৈরি করুন যেখানে `displayItemDetails()` মেথড থাকবে। এটি `Book` এবং `Magazine` ক্লাসে ইনহেরিট করে প্রদর্শন করুন।
16. পলিমরফিজম ব্যবহার করে একটি প্রোগ্রাম তৈরি করুন যেখানে একটি `Shape` অ্যারে থাকবে এবং এতে বিভিন্ন ধরনের শেপ (যেমন: `circle`, `square`) থাকবে, এবং প্রতিটি শেপের `area()` মেথড পলিমরফিকভাবে কল হবে।
17. একটি `Car` এবং `Truck` ক্লাস তৈরি করুন, যা `Vehicle` ক্লাস থেকে ইনহেরিট করবে। `fuelEfficiency()` মেথডকে পলিমরফিকভাবে কল করুন।

### 6. **অ্যাবস্ট্রাকশন:**
18. একটি অ্যাবস্ট্রাক্ট `Shape` ক্লাস তৈরি করুন যার মধ্যে একটি অ্যাবস্ট্রাক্ট `area()` মেথড থাকবে। তারপর `Rectangle` এবং `Circle` ক্লাসে `area()` মেথডের বাস্তবায়ন দিন।
19. একটি অ্যাবস্ট্রাক্ট `Account` ক্লাস তৈরি করুন যার মধ্যে `deposit()` এবং `withdraw()` মেথড থাকবে। তারপর `SavingsAccount` এবং `CurrentAccount` ক্লাসে এগুলো বাস্তবায়ন করুন।
20. একটি অ্যাবস্ট্রাক্ট `Animal` ক্লাস তৈরি করুন যার মধ্যে `makeSound()` মেথড থাকবে। এরপর `Dog` এবং `Cat` ক্লাসে এটি বাস্তবায়ন করুন।


### 7. **ইন্টারফেস:**
26. একটি `Printable` ইন্টারফেস তৈরি করুন যার মধ্যে `print()` মেথড থাকবে। এরপর `Document` এবং `Invoice` ক্লাস তৈরি করুন যা এই ইন্টারফেস ইমপ্লিমেন্ট করবে।
27. একটি `Shape` ইন্টারফেস তৈরি করুন যার মধ্যে `area()` এবং `perimeter()` মেথড থাকবে। এরপর `Rectangle` এবং `Circle` ক্লাসে এগুলো ইমপ্লিমেন্ট করুন।
28. একটি `Driveable` ইন্টারফেস তৈরি করুন যার মধ্যে `drive()` মেথড থাকবে। `Car` এবং `Truck` ক্লাসে এই ইন্টারফেসটি ইমপ্লিমেন্ট করুন।
29. একটি `Playable` ইন্টারফেস তৈরি করুন যার মধ্যে `play()` মেথড থাকবে। এরপর `Piano` এবং `Guitar` ক্লাসে এই ইন্টারফেসটি ইমপ্লিমেন্ট করুন।
30. একটি `Movable` ইন্টারফেস তৈরি করুন যার মধ্যে `moveForward()` এবং `moveBackward()` মেথড থাকবে। `Car` এবং `Bicycle` ক্লাসে এটি ইমপ্লিমেন্ট করুন।

### 8. **মেথড ওভারলোডিং:**
31. একটি `Calculator` ক্লাস তৈরি করুন যার মধ্যে দুটি `add()` মেথড থাকবে—একটি দুটি পূর্ণসংখ্যা যোগ করবে এবং অন্যটি তিনটি পূর্ণসংখ্যা যোগ করবে।
32. একটি `Concatenator` ক্লাস তৈরি করুন যার মধ্যে দুটি `concat()` মেথড থাকবে—একটি দুটি স্ট্রিং এবং অন্যটি তিনটি স্ট্রিং যুক্ত করবে।
33. একটি `Volume` ক্লাস তৈরি করুন যার মধ্যে একক, গোলক এবং সিলিন্ডারের জন্য অতিরিক্ত প্যারামিটার সহ `volume()` মেথড থাকবে।
34. একটি `Print` ক্লাস তৈরি করুন যার মধ্যে বিভিন্ন ডেটা টাইপ (যেমন: পূর্ণসংখ্যা, স্ট্রিং, ডাবল) প্রিন্ট করার জন্য `display()` মেথডের ওভারলোডিং থাকবে।
35. একটি `MathOperation` ক্লাস তৈরি করুন যার মধ্যে `power(int, int)` এবং `power(double, int)` মেথড থাকবে।

### 9. **মেথড ওভাররাইডিং:**
36. একটি `Bird` ক্লাস তৈরি করুন যার মধ্যে `fly()` মেথড থাকবে। এরপর `Sparrow` এবং `Eagle` ক্লাসে `fly()` মেথড ওভাররাইড করুন।
37. একটি `Shape` ক্লাস তৈরি করুন যার মধ্যে `draw()` মেথড থাকবে। `Rectangle` এবং `Circle` ক্লাসে `draw()` মেথড ওভাররাইড করুন।
38. একটি `Payment` ক্লাস তৈরি করুন যার মধ্যে `processPayment()` মেথড থাকবে। এরপর `CreditCardPayment` এবং `CashPayment` ক্লাসে এই মেথড ওভাররাইড করুন।
39. একটি `Vehicle` ক্লাস তৈরি করুন যার মধ্যে `start()` মেথড থাকবে। এরপর `Car` এবং `Bike` ক্লাসে এই মেথড ওভাররাইড করুন।
40. একটি `Employee` ক্লাস তৈরি করুন যার মধ্যে `calculateSalary()` মেথড থাকবে। এরপর `Manager` এবং `Developer` ক্লাসে এই মেথড ওভাররাই
